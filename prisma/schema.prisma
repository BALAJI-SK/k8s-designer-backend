// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}
model otps{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  otp String @map("otp")
  email String @map("email")
  timestamp DateTime @map("timestamp") @default(now())
  @@map("otps")
}
model user {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName String   @map("full_name")
  email    String   @unique @map("email")
  password String   @map("password") 
  salt     String   @map("salt")
  Project  project[]

  @@map("users")
}

model project {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                 user                   @relation(fields: [userId], references: [id])
  userId               String                 @map("user_id") @db.Uuid
  timestamp            DateTime               @map("timestamp") @default(now())
  projectServiceConfig projectServiceConfig[]

  @@map("projects")
}

model projectServiceConfig {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project         project?          @relation(fields: [projectId], references: [id])
  projectId       String            @map("project_id") @db.Uuid
  serviceType     String            @map("service_type")
  frontendService frontendService[]
  backendService  backendService[]
  databaseService databaseService[]
  envVariables    envVariables[]
  imageRepository imageRepository[]

  @@map("project_service_configs")
}

model frontendService {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  port                 String                @map("port")
  numberOfReplicas     Int                   @map("number_of_replicas")
  name                 String                @map("name")
  projectServiceConfig projectServiceConfig? @relation(fields: [serviceId], references: [id])
  serviceId            String                @map("service_id") @db.Uuid @default(dbgenerated("gen_random_uuid()"))

  @@map("frontend_services")
}

model backendService {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  port                 String                @map("port")
  numberOfReplicas     Int                   @map("number_of_replicas")
  name                 String                @map("name")
  projectServiceConfig projectServiceConfig? @relation(fields: [serviceId], references: [id])
  serviceId            String                @map("service_id") @db.Uuid  @default(dbgenerated("gen_random_uuid()"))

  @@map("backend_services")
}
model databaseService {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @map("database_name")
  dbUser               String                @map("db_user") 
  dbPassword           String                @map("db_password")
  port                 String                @map("port")
  numberOfReplicas     Int                   @map("number_of_replicas")
  schemaName           String                @map("schema_name") @default("public")
  projectServiceConfig projectServiceConfig? @relation(fields: [serviceId], references: [id])
  serviceId            String                @map("service_id") @db.Uuid  @default(dbgenerated("gen_random_uuid()"))

  @@map("database_services")
}
model envVariables {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  field                String                @map("field")
  value                String                @map("value")
  projectServiceConfig projectServiceConfig? @relation(fields: [serviceId], references: [id])
  serviceId            String                @map("service_id") @db.Uuid

  @@map("env_variables")
}

model imageRepository{
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String                @map("username")
  email               String                @map("email") 
  imageRepositoryUrl  String                @map("image_repository_url")
  imageRepositoryToken String               @map("image_repository_token")
  projectServiceConfig projectServiceConfig? @relation(fields: [serviceId], references: [id])
  serviceId            String                @map("service_id") @db.Uuid

  @@map("image_repositories")
}

enum serviceType {
  FrontEnd
  BackEnd
  Database
}
